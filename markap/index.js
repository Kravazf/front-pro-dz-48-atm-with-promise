const parse = (response) => JSON.parse(response);

function checkBalance(userData, bankData) {
  const isCheckBalance = confirm('–ë–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–∞–ª–∞–Ω—Å?');

  if (isCheckBalance) {
    getAvailableCurrencies()
      .then((data) => {
        const currencies = Object.keys(data.userData);
        const selectedCurrency = prompt(`–í–≤–µ–¥—ñ—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±–∞–ª–∞–Ω—Å—É (–¥–æ—Å—Ç—É–ø–Ω—ñ –≤–∞–ª—é—Ç–∏: ${currencies.join(', ')})`).toUpperCase().trim().replace(/ /g, '');

        if (!data.userData.hasOwnProperty(selectedCurrency)) {
          console.log('–ù–µ –≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–∞ –≤–∞–ª—é—Ç–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
          checkBalance(userData);
        } else {
          console.log(`–í–∞—à –±–∞–ª–∞–Ω—Å —Å–∫–ª–∞–¥–∞—î ${userData[selectedCurrency]} ${selectedCurrency}`);
          showThankYouMessage();
        }
      })
      .catch((err) => {
        handleWithdrawError(err, userData, bankData);
      });
  } else {
    getCurrencyForWithdrawal(userData, bankData);
  }
}

function showThankYouMessage() {
  console.log('–î—è–∫—É—î–º–æ, –≥–∞—Ä–Ω–æ–≥–æ –¥–Ω—è üòä');
}

function handleWithdrawError(err, userData, bankData) {
  if (err.userData && err.bankData) {
    const userData = err.userData;
    const bankData = err.bankData;

    const currenciesWithNoBills = Object.keys(userData).filter(currency => bankData[currency].max === 0);

    if (currenciesWithNoBills.length > 0) {
      const selectedCurrency = prompt(`–ë–∞–Ω–∫–æ–º–∞—Ç –Ω–µ –º–∞—î –∫—É–ø—é—Ä —É –≤–∞–ª—é—Ç–∞—Ö: ${currenciesWithNoBills.join(', ')}. –í–≤–µ–¥—ñ—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –∑–Ω—è—Ç—Ç—è –≥–æ—Ç—ñ–≤–∫–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "–°–∫–∞—Å—É–≤–∞—Ç–∏" –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è.`);

      if (selectedCurrency === null) {
        getCurrencyForWithdrawal(userData, bankData);
      } else {
        withdrawMoney(userData, bankData, selectedCurrency);
      }
    } else {
      console.log('–ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∞–ª—é—Ç –¥–ª—è –∑–Ω—è—Ç—Ç—è –≥–æ—Ç—ñ–≤–∫–∏.');
    }
  } else {
    console.log('–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.');
    showThankYouMessage();
  }
}

function getCurrencyForWithdrawal(userData, bankData) {
  const currencies = Object.keys(bankData);
  const currencyInput = prompt(`–í–≤–µ–¥—ñ—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –∑–Ω—è—Ç—Ç—è –≥–æ—Ç—ñ–≤–∫–∏ (${currencies.join(', ')})`);

  if (currencyInput === null) {
    console.log('–û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.');
    showThankYouMessage();
    return;
  }

  const formattedCurrencyInput = currencyInput.toUpperCase().trim().replace(/ /g, '');

  if (!bankData.hasOwnProperty(formattedCurrencyInput) || !bankData.hasOwnProperty(formattedCurrencyInput)) {
    console.log('–ù–µ–≤—ñ—Ä–Ω–æ –≤–∫–∞–∑–∞–Ω–∞ –≤–∞–ª—é—Ç–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑');
    getCurrencyForWithdrawal(userData, bankData);
  } else {
    withdrawMoney(userData, bankData, formattedCurrencyInput);
  }
}

function withdrawMoney(userData, bankData, currency) {
  const amount = parseInt(prompt(`–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –¥–ª—è –∑–Ω—è—Ç—Ç—è –≥–æ—Ç—ñ–≤–∫–∏ —É –≤–∞–ª—é—Ç—ñ ${currency} (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞: ${bankData[currency].max}, –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞: ${bankData[currency].min})`));

  if (isNaN(amount)) {
    console.log('–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    withdrawMoney(userData, bankData, currency);
    return;
  }

  if (amount < bankData[currency].min) {
    console.log(`–í–≤–µ–¥–µ–Ω–∞ —Å—É–º–∞ –º–µ–Ω—à–∞ –∑–∞ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –º—ñ–Ω—ñ–º—É–º. –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è: ${bankData[currency].min}`);
    showThankYouMessage();
    return;
  }

  if (amount > bankData[currency].max) {
    console.log(`–í–≤–µ–¥–µ–Ω–∞ —Å—É–º–∞ –ø–µ—Ä–µ–≤–∏—â—É—î –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –º–∞–∫—Å–∏–º—É–º. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–Ω—è—Ç—Ç—è: ${bankData[currency].max}`);
    showThankYouMessage();
    return;
  }

  if (amount > userData[currency]) {
    console.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ.');
    showThankYouMessage();
    return;
  }

  userData[currency] -= amount;
  console.log(`–û—Å—å –≤–∞—à—ñ –≥–æ—Ç—ñ–≤–∫–æ–≤—ñ ${amount} ${currency} ${bankData[currency].img}`);
  showThankYouMessage();
}

function getMoney(userData, bankData) {
  const isCheckBalance = confirm('–ë–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –±–∞–ª–∞–Ω—Å?');

  return new Promise((resolve, reject) => {
    isCheckBalance ? resolve(userData) : reject({ userData, bankData });
  });
}

function getAvailableCurrencies() {
  return new Promise((resolve, reject) => {
    const controller = new XMLHttpRequest();
    controller.open('GET', 'atm.json');
    controller.send();
  
    controller.addEventListener('readystatechange', () => {
      if (controller.readyState === 4) {
        controller.status < 400 ? resolve(parse(controller.response)) : reject(controller.status);
      }
    });
  });
}

getAvailableCurrencies()
  .then((data) => {
    const userData = data.userData;
    const bankData = data.bankData;

    checkBalance(userData, bankData);
  })
  .catch((err) => console.log(err));